// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package conv1d_control_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 4;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {logic q;} start;
    struct packed {logic q;} mcu_using_sram;
    struct packed {logic q;} loaded_flag;
  } conv1d_control_reg2hw_control_reg_t;

  typedef struct packed {
    struct packed {logic q;} running;
    struct packed {logic q;} done;
    struct packed {logic q;} accelerator_using_sram;
    struct packed {logic q;} reload_flag;
    struct packed {logic q;} done_calculation;
    struct packed {logic q;} done_filter;
    struct packed {logic [2:0] q;} filter_number_sram;
    struct packed {logic [2:0] q;} data_number_sram;
    struct packed {logic [1:0] q;} lego_number_din;
    struct packed {logic [1:0] q;} lego_number_weights;
    struct packed {logic [4:0] q;} lego_tower_din;
  } conv1d_control_reg2hw_status1_reg_t;

  typedef struct packed {
    struct packed {logic [7:0] q;} din_address;
    struct packed {logic [7:0] q;} dout_address;
    struct packed {logic [7:0] q;} weight_address;
  } conv1d_control_reg2hw_status2_reg_t;

  typedef struct packed {
    struct packed {
      logic d;
      logic de;
    } running;
    struct packed {
      logic d;
      logic de;
    } done;
    struct packed {
      logic d;
      logic de;
    } accelerator_using_sram;
    struct packed {
      logic d;
      logic de;
    } reload_flag;
    struct packed {
      logic d;
      logic de;
    } done_calculation;
    struct packed {
      logic d;
      logic de;
    } done_filter;
    struct packed {
      logic [2:0] d;
      logic       de;
    } filter_number_sram;
    struct packed {
      logic [2:0] d;
      logic       de;
    } data_number_sram;
    struct packed {
      logic [1:0] d;
      logic       de;
    } lego_number_din;
    struct packed {
      logic [1:0] d;
      logic       de;
    } lego_number_weights;
    struct packed {
      logic [4:0] d;
      logic       de;
    } lego_tower_din;
  } conv1d_control_hw2reg_status1_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic       de;
    } din_address;
    struct packed {
      logic [7:0] d;
      logic       de;
    } dout_address;
    struct packed {
      logic [7:0] d;
      logic       de;
    } weight_address;
  } conv1d_control_hw2reg_status2_reg_t;

  // Register -> HW type
  typedef struct packed {
    conv1d_control_reg2hw_control_reg_t control;  // [47:45]
    conv1d_control_reg2hw_status1_reg_t status1;  // [44:24]
    conv1d_control_reg2hw_status2_reg_t status2;  // [23:0]
  } conv1d_control_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    conv1d_control_hw2reg_status1_reg_t status1;  // [58:27]
    conv1d_control_hw2reg_status2_reg_t status2;  // [26:0]
  } conv1d_control_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CONV1D_CONTROL_CONTROL_OFFSET = 4'h0;
  parameter logic [BlockAw-1:0] CONV1D_CONTROL_STATUS1_OFFSET = 4'h4;
  parameter logic [BlockAw-1:0] CONV1D_CONTROL_STATUS2_OFFSET = 4'h8;

  // Register index
  typedef enum int {
    CONV1D_CONTROL_CONTROL,
    CONV1D_CONTROL_STATUS1,
    CONV1D_CONTROL_STATUS2
  } conv1d_control_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CONV1D_CONTROL_PERMIT[3] = '{
      4'b0001,  // index[0] CONV1D_CONTROL_CONTROL
      4'b0111,  // index[1] CONV1D_CONTROL_STATUS1
      4'b0111  // index[2] CONV1D_CONTROL_STATUS2
  };

endpackage

